Write-Warning @'
start steppable pipeline thread on:
    https://discord.com/channels/180528040881815552/447476117629304853/981352453779894373
'@

throw '2022/05 todo: requires Write-color import. left off here.'

'to complete'
throw 'left off here'

function format-invokeName {
    <#
    .synopsis
        template for some debug functions
    #>
    [Alias('fmt-invoke')]
    [OutputType('System.String')]
    [CmdletBinding()]
    param(
        <#
        Which typeof?
            [PSScriptCmdlet], [PSCmdlet], [Cmdlet], [InternalCommand], [object]
            list generated by: @( '[PSScriptCmdlet]'; $PSCmdlet.pstypenames |convert 'type' | shortType -NoColor | csv2 ) | csv2
        #>
        #PSScriptCmdlet]
        [object]$PSCmdlet,
        [hashtable]$Options = @{}
    )
    $Config = Join-Hashtable -OtherHash $Options @{
        Fg       = [rgbcolor]'gray80'
        FgBright = [rgbcolor]'323234' # [rgbcolor]'teal'
        FgDim    = [rgbcolor]'gray40'
        Style    = 'color'
    }

    $meta = @{
        MyInvokeName = $PSCmdlet.MyInvocation.InvocationName # is func name or alias used
        myInvokeLine = $PSCmdlet.MyInvocation.ScriptLineNumber
    }
    $myName

    if (-not $Config.Style ) {
        'I ( {0} ) was invoked from line: {1}' -f @(  $myName ; $myInvokeFromLine )
        return
    }
    (@(
        Write-Color $Config.Fg
        $meta.myInvokeLine.ToString().PadLeft(3)
        $PSStyle.Reset
        $Config.FgDim
        $Config.Fg
        #

        '|'
        $Config.FgDim
        $meta.MyInvokeName


    ) | ForEach-Object tostring) -join ''

}

function _double {
    [CmdletBinding()]
    param( [Parameter(ValueFromPipeline)] $Obj)
    process {
        fmt-invokeName $PSCmdlet
        [string]$obj * 2 -join ''
        fmt-invokeName $PSCmdlet
    }
}
function _star {
    [CmdletBinding()]
    param( [Parameter(ValueFromPipeline)] $Obj)
    process {
        fmt-invokeName $PSCmdlet
        @( '*', $Obj, '*' ) -join ''
        # [string]$obj * 2 -join ''
        fmt-invokeName $PSCmdlet
    }
}

'a'..'e' | _double | _star

& {
    $ErrorActionPreference = 'break'
    'hi world'

    1 / 0

    'stuff'
}

<#
original question

'a','b', 'c' | %{

}

'lsdfl'

'a', 'b', 'c' | double | star


# pipeline 0
push 'a'
# pipeline: double
    pop 'a'
    push 'aa'

# pipeline quote
    pop 'aa'
    "aa"


pipe0 push 'a'
pipe1 pop 'a'
pipe1 push 'aa'
pipe2 pop  'aa'
end '*aa*'

pipe0 push 'a'
pipe1 pop 'a'
pipe1 push 'aa'
pipe2 pop  'aa'
end '*aa*'



push '*aa*'
push pipe0 'a'


#>


# attri